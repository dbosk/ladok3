This is the documentation of the command-line interface module ([[cli]]) of the 
[[ladok3]] package, [[<<cli.py>>]].

The command-line interface is divided into subcommands, similar to Git.
Currently, we provide the following commands:
\begin{description}
\item[data]
The command outputs all results for all rounds of a course in CSV format.
\end{description}


\section{Overview of the source code and dependencies}

We use [[argparse]] with [[argcomplete]] to handle the command-line interface.
We use [[appdirs]] to handle configuration directories on various systems, we 
set up a global [[dirs]] that we can use.
<<cli.py>>=
#!/bin/env python3
"""A command-line interface for LADOK 3"""

import appdirs
import argcomplete, argparse
import base64
from cryptography.fernet import Fernet
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
import getpass
import json
import keyring
import ladok3
import os
import pickle
import re
import sys
import traceback
import weblogin
import weblogin.ladok
import weblogin.seamlessaccess as sa

<<modules>>

dirs = appdirs.AppDirs("ladok", "dbosk@kth.se")

<<functions>>
<<command-line interface>>
@


\section{A command-line interface}%
\label{command-line-interface}

The idea is that we have the basic command that can take some options and 
ultimately some subcommand.
The subcommands do the heavy lifting.
We use a standard Pythonic if-main construction.
<<command-line interface>>=
def main():
  """Run the command-line interface for the ladok command"""
  <<process command-line options>>

if __name__ == "__main__":
  try:
    main()
    sys.exit(0)
  except Exception as e:
    err(-1, e)
@

We want uniform error handling.
We will use the function [[err]] for errors and [[warn]] for warnings, both 
inspired by err(3) and warn(3) in the BSD world.
<<functions>>=
def err(rc, msg):
  print(f"{sys.argv[0]}: error: {msg}", file=sys.stderr)
  sys.exit(rc)

def warn(msg):
  print(f"{sys.argv[0]}: {msg}", file=sys.stderr)
@


\subsection{Process command-line options}%
\label{process-command-line-options}

The main part done here is to set up a [[LadokSession]] object~[[ls]].
We can do this in two ways:
\begin{enumerate*}
\item create a new object using the user's credentials to log in; or
\item restore the [[ls]] object from a previous run.
\end{enumerate*}

We'll use [[argparse]] to parse the command-line options.
<<process command-line options>>=
argp = argparse.ArgumentParser(
  description="This is a CLI-ification of LADOK3's web GUI.",
  epilog="Web: https://github.com/dbosk/ladok3"
)
<<add global configuration options>>
subp = argp.add_subparsers(
  title="commands",
  dest="command",
  required=True
)
<<add subparsers to subp>>
argcomplete.autocomplete(argp)
args = argp.parse_args()
<<create or restore the LadokSession ls>>
<<execute subcommand>>
<<save LadokSession ls>>
@

For each subcommand, we will add a subparser ([[subp.add_parser]]) that will 
set the [[func]] attribute.
Then we can execute the correct function and let that function check the 
remaining arguments.
We must also pass on a LADOK session object~[[ls]].

We note, however, that some subcommands (like [[cache]] or [[login]]) don't 
need the [[ls]].
The command [[login]] in particular is expected to run before the [[ls]] object 
can be constructed (no credentials exist).
The reason this works is that we can create the [[ls]] object with [[None]] for 
credentials, the failure will not happen until we make the first request.
The first request is made by the command's function, which in the case of 
[[login]] never uses [[ls]].
<<execute subcommand>>=
if "func" in args:
  args.func(ls, args)
@


\section{Create the LadokSession~[[ls]]}

We have several options for creating the LadokSession object~[[ls]] that must 
be passed to the subcommand:
\begin{enumerate}
\item The first one is to read the user's credentials (from the keyring, 
environment or configuration) and create the [[ls]] object by instantiating the 
[[LadokSession]] class.
\item Read a pickled [[LadokSession]] object from file.
\end{enumerate}
The second option allows us to save time by not having to reestablish an 
authenticated session to LADOK.
The authentication step takes much more time than individual LADOK requests.

We want to handle authentication for all universities.
This means that we must keep track of two things, the institution and the 
user's credentials\footnote{%
  Which is usually a username and a password.
} at that institution.
When we create the LADOK session object, we must supply those credentials to 
the [[weblogin.ladok.SSOlogin]] login handler.

This leads to the following approach.
[[LADOK_INST]] is simply a string identifying the institution at 
SeamlessAccess.org (see documentation of [[weblogin]]) and [[LADOK_VARS]] is a 
dictionary where the keys map to variable names and the values should be 
substituted in the login forms (see documentation of [[weblogin]]).
We use [[LADOK_VARS]] as credentials, since it contains the credentials.
<<create or restore the LadokSession ls>>=
LADOK_INST, LADOK_VARS = load_credentials(args.config_file)
try:
  ls = restore_ladok_session(LADOK_VARS)
<<handle exceptions during restore of [[ls]]>>
if not ls:
  ls = ladok3.LadokSession(LADOK_INST, vars=LADOK_VARS)
<<save LadokSession ls>>=
store_ladok_session(ls, LADOK_VARS)
@

Now, if there is an error from [[restore_ladok_session]], we know that there is 
a session that should be loaded.
If there is no previous session, it will just return [[None]].
In the event of an exception, we know that either the credentials aren't 
available to decrypt it or the file is corrupted.
In either case, we should tell the user.
<<handle exceptions during restore of [[ls]]>>=
except ValueError as error:
  err(-1, f"Couldn't restore LADOK session: {error}")
@

\subsection{Saving and restoring the [[LadokSession]] object}

Now we need to implement the [[store_ladok_session]] and 
[[restore_ladok_session]] functions.
We will use [[pickle]] for storing and restoring the object.
But we also want to encrypt the stored object using authenticated encryption.
That way, we know that we can trust the pickle (which is otherwise a problem).
<<functions>>=
def store_ladok_session(ls, credentials):
  if not os.path.isdir(dirs.user_cache_dir):
    os.makedirs(dirs.user_cache_dir)

  file_path = dirs.user_cache_dir + "/LadokSession"

  pickled_ls = pickle.dumps(ls)
  <<encrypt pickled ls>>

  with open(file_path, "wb") as file:
    file.write(encrypted_ls)
  
def restore_ladok_session(credentials):
  file_path = dirs.user_cache_dir + "/LadokSession"

  if os.path.isfile(file_path):
    with open(file_path, "rb") as file:
      encrypted_ls = file.read()
      <<decrypt encrypted ls>>
      if pickled_ls:
        return pickle.loads(pickled_ls)

  return None
@

We don't want to only encrypt the object, we also want to provide integrity for 
the object.
This is to avoid any vulnerabilities with [[pickle]].
We use the [[cryptography]] module to handle the encryption.
In particular, we use the [[cryptography.fernet]] protocol which encrypts using 
AES and signs using HMAC.

We will use the user's LADOK password to generate a cryptographic key.
Then we do the encryption/decryption.
<<encrypt pickled ls>>=
<<set up kdf and derive key from credentials>>

fernet_protocol = Fernet(key)
encrypted_ls = fernet_protocol.encrypt(pickled_ls)

<<decrypt encrypted ls>>=
<<set up kdf and derive key from credentials>>

fernet_protocol = Fernet(key)
try:
  pickled_ls = fernet_protocol.decrypt(encrypted_ls)
except Exception as err:
  warn(f"cache was corrupted, cannot decrypt: {err}")
  pickled_ls = None
@

To actually do the key derivation, we use the PBKDF2 based on HMAC.
We use the supplied credentials for salt and password.
<<set up kdf and derive key from credentials>>=
if not credentials or len(credentials) < 2:
  raise ValueError(f"Missing credentials, see `ladok login -h`.")

if isinstance(credentials, dict):
  try:
    salt = credentials["username"]
    passwd = credentials["password"]
  except KeyError:
    credentials = list(credentials.values())
    <<get salt and passwd from credentials list>>
else:
  <<get salt and passwd from credentials list>>

kdf = PBKDF2HMAC(
  algorithm=hashes.SHA256(),
  length=32,
  salt=salt.encode("utf-8"),
  iterations=100000
)
key = base64.urlsafe_b64encode(kdf.derive(passwd.encode("utf-8")))

<<get salt and passwd from credentials list>>=
salt = credentials[0]
passwd = credentials[1]
@


\section{Configuration}

We provide a global configuration file.
We want to allow the user to specify different locations for the configuration.

\paragraph{Location of configuration files}

We want the user to be able to specify the location of the configuration 
file.
<<add global configuration options>>=
argp.add_argument("-f", "--config-file",
  default=f"{dirs.user_config_dir}/config.json",
  help="Path to configuration file "
    f"(default: {dirs.user_config_dir}/config.json) "
    "or set LADOK_USER and LADOK_PASS environment variables.")
@ Since we provide the default value here, we can always rely on it to be 
available, so we can use [[args.config_file]] directly when we want to access 
the configuration file.


\section{Managing credentials: the \texttt{login} command}

We want a subcommand to handle the user's credentials for accessing LADOK.
In particular, we need the user to be able to change the credentials in the 
system keyring, \eg in case the user wrote the wrong password.
The rest we don't need to do much about, merely point out the possibilities to 
the user.
<<login description>>=
Manages the user's LADOK login credentials. There are three ways to supply the 
login credentials, in order of priority:

1) Through the system keyring: Just run `ladok login` and you'll be asked to 
   enter the credentials and they will be stored in the keyring. Note that for 
   this to work on the WSL platform (and possibly on Windows), you need to 
   install the `keyrings.alt` package: `python3 -m pip install keyrings.alt`.

2) Through the environment: Just set the environment variables

  a) LADOK_INST, the name of the institution, e.g. KTH Royal Institute of 
  Technology;
  b) LADOK_VARS, a colon-separated list of environment variables, similarly to 
  what's done in `ladok login` --- most don't need this, but can rather set
  LADOK_USER (the username, e.g. dbosk@ug.kth.se) and
  LADOK_PASS (the password) instead.

3) Through the configuration file: Just write

      {{
        "institution": "the name of the university"
        "username": "the actual username",
        "password": "the actual password"
      }}

   to the file {dirs.user_config_dir}/config.json (default, or use the -f 
   option). (The keys 'username' and 'password' can be renamed to correspond to 
   the necessary values if the university login system uses other names.)

<<add subparsers to subp>>=
login_parser = subp.add_parser("login",
  help="Manage login credentials",
  formatter_class=argparse.RawDescriptionHelpFormatter,
  description=f"""
<<login description>>
""")

login_parser.set_defaults(func=update_credentials_in_keyring)
@

\subsection{Updating the credentials in the keyring}

As stated, if the subcommand is run, we should update the credentials in the 
keyring.
<<login prompt>>=
This login process is exactly the same as when you log in using
the web browser. You need three things:

  1) The name of your institution, so that it can be uniquely identified.

  2) Your username at your institution. This is sometimes a username (such as 
     `dbosk`) or an email address (such as `dbosk@kth.se`). However, 
     occasionally, you type in the username in the web browser and it is 
     actually complemented: for instance, at KTH, I type in my username `dbosk` 
     and then on the password screen, I can see it has been complemented to 
     `dbosk@ug.kth.se`. Be observant about that.

  3) Your password at your institution.

@

If we run this subcommand, also want to clear the cache; otherwise, the cache 
will keep the outdated credentials.
<<functions>>=
def update_credentials_in_keyring(ls, args):
  print("""
<<login prompt>>
""")
  while True:
    institution = input("Institution: ")
    <<check that institution uniquely identifies on SeamlessAccess>>

  vars = {
    "username": input("Institution username: "),
    "password": getpass.getpass("Institution password: [input is hidden] ")
  }
  <<try to log into LADOK to verify credentials or update vars>>

  try:
    keyring.set_password("ladok3", "institution", institution)
    keyring.set_password("ladok3", "vars", ";".join(vars.keys()))
    for key, value in vars.items():
      keyring.set_password("ladok3", key, value)
  except Exception as err:
    <<print error message about keyring>>

  clear_cache(ls, args)
@

We want to print using the [[err]] function defined earlier.
But this doesn't work due to all exceptions named [[err]].
However, we can access it using the [[globabl()["err"]]].
<<print error message about keyring>>=
globals()["err"](-1, f"You don't seem to have a working keyring. "
                      f"Use one of the other methods, see "
                      f"`ladok login -h`: {err}.")
@

Now, we want to check that the institution is uniquely identified at 
SeamlessAccess using the name provided by the user.
We do this by looking up the name and asking the user to change if not a unique 
match.
<<check that institution uniquely identifies on SeamlessAccess>>=
matches = sa.find_entity_data_by_name(institution)

if not matches:
  print("No match, try again.")
  continue

if len(matches) > 1:
  print("More than one match. Which one?")
  for match in matches:
    print(f"- {match['title']}")
  continue

match = matches[0]

print(f"Matched uniquely, using {match['title']}\n"
      f"            with domain {match['domain']} and\n"
      f"      unique identifier {match['id']}.")

institution = match['id']
break
@

Once we're done with the institution, we can try to log in with the 
credentials.
We do this by creating a LADOK session object and try if we can successfully 
make an API call.
If there is an authentication error, we'll get a 
[[weblogin.AuthenticationError]] exception that can be used by the user to 
debug and adjust the variable names needed by their institution's login 
service.
<<try to log into LADOK to verify credentials or update vars>>=
while True:
  temp_ls = ladok3.LadokSession(institution, vars=vars)

  try:
    temp_ls.user_info_JSON()
  except weblogin.AuthenticationError as err:
    adjust_vars(vars, err.variables)
  else:
    break
<<functions>>=
def adjust_vars(vars, form_variables):
  print("""
<<user instructions to adapt variable names and values>>
""")
  input("\nPress return to continue.\n")

  <<adjust vars using variables from err>>
@

An authentication error can be due to several things:
\begin{enumerate}
\item the user entered the username or (more likely) the password incorrectly,
\item the user's institution uses different names for their form fields than 
[[username]] and [[password]].
\end{enumerate}
In both cases, we'll ask the user to review the variables and their contents, 
and adjust if necessary.
<<user instructions to adapt variable names and values>>=
Some part of the authentication went wrong. Either you typed your username or 
password incorrectly, or your institution requires some adjustments. We'll 
guide you through it.

We will show you some variable names and values and give you the opportunity to 
change the values according to the name of the variable. For instance, we 
assume that the institution call the variable for the username `username`, but 
they might call it `användarnamn` instead. You'll have to figure this out.

Remember, the problem might also be that you entered your username as 'dbosk', 
when it should be 'dbosk@ug.kth.se' --- or something similar. Use your 
institution's login page to figure this out.

Note: Your password will be visible on screen during this process.
@

We note that [[weblogin.ladok.SSOlogin]] requires the keys to be casefolded.
So we do that too, and present the variables casefolded so that the users use 
casefolded names when they try to set up environment variables.
<<adjust vars using variables from err>>=
for key, value in form_variables.items():
  key = key.casefold()
  new_val = input(f"{key} = '{value}' "
                  f"[enter new value, blank to keep] ")
  if new_val:
    vars[key] = new_val
@


\subsection{Loading user credentials}

The [[load_credentials]] function will try to get the user's LADOK credentials.
There are three locations:
\begin{enumerate}
\item the system keyring,
\item the environment variables: [[LADOK_INST]], [[LADOK_USER]] and 
[[LADOK_PASS]],
\item the configuration file.
\end{enumerate}
They are given the priority they are listed in above.
It tries to fetch the credentials in the given order; if it succeeds, it 
returns those credentials, otherwise it tries the next.
If all fail, the function will return [[None]] for both.
(This is due to how we handle the [[login]] command.)
<<functions>>=
def load_credentials(filename="config.json"):
  """
  Loads credentials from environment or file named filename.
  Returns the tuple (instituation, credential dictionary) that
  can be passed to `LadokSession(instiution, credential dictionary)`.
  """

  <<fetch vars from keyring>>
  <<fetch username and password from keyring>>
  <<fetch institution from environment>>
  <<fetch username and password from environment>>
  <<fetch vars from environment>>
  <<fetch vars from config file>>

  return None, None
@

First we try the newest format.
We try to fetch the institution and vars from the keyring.
<<fetch vars from keyring>>=
try:
  institution = keyring.get_password("ladok3", "institution")
  vars_keys = keyring.get_password("ladok3", "vars")

  vars = {}
  for key in vars_keys.split(";"):
    vars[key] = keyring.get_password("ladok3", key)

  if institution and vars:
    return institution, vars
except:
  pass
@

However, if that fails, we fall back on the previous format, that only 
supported KTH.
<<fetch username and password from keyring>>=
try:
  institution = "KTH Royal Institute of Technology"
  vars = {
    "username": keyring.get_password("ladok3", "username"),
    "password": keyring.get_password("ladok3", "password")
  }
  if vars:
    return institution, vars
except:
  pass
@

Next in priority is to read from the environment.
We try to read the institution.
If that fails, we assume we're using the old format that only supported KTH.
<<fetch institution from environment>>=
try:
  institution = os.environ["LADOK_INST"]
except:
  institution = "KTH Royal Institute of Technology"

<<fetch username and password from environment>>=
try:
  vars = {
    "username": os.environ["LADOK_USER"],
    "password": os.environ["LADOK_PASS"]
  }
  if institution and vars:
    return institution, vars
except:
  pass
@

If we couldn't read the old [[LADOK_USER]] and [[LADOK_PASS]], we try to read 
the [[vars]] from the environment using [[LADOK_VARS]].
<<fetch vars from environment>>=
try:
  vars_keys = os.environ["LADOK_VARS"]

  vars = {}
  for key in vars_keys.split(":"):
    vars[key] = os.environ[key]

  if institution and vars:
    return institution, vars
except:
  pass
@

If none of the above worked, the last resort is to try to read the 
configuration file.
We pop the institution from the configuration file (a dictionary), because then 
the remaining entries will be used as [[vars]].
<<fetch vars from config file>>=
try:
  with open(filename) as conf_file:
    config = json.load(conf_file)

  institution = config.pop("institution",
                            "KTH Royal Institute of Technology")
  return institution, config
except:
  pass
@


\section{Managing the cache: the \texttt{cache} command and subcommands}

We need a command to control the cache.
For this purpose we provide the [[cache]] subcommand.
This command will in turn have subcommands.
<<add subparsers to subp>>=
cache_parser = subp.add_parser("cache",
  help="Manage cache",
  description="Manages the cache of LADOK data"
)
cache_subp = cache_parser.add_subparsers(
  title="subcommands",
  dest="subcommand",
  required=True
)
<<add subcommands to cache command>>
@


\subsection{Clear the cache}

Since the cache stores sensitive data (student data) and the login credentials, 
we want to be able to clear the cache.
<<add subcommands to cache command>>=
cache_clear = cache_subp.add_parser("clear",
  help="Clear the cache",
  description="Clears everything from the cache"
)
cache_clear.set_defaults(func=clear_cache)
@

The [[clear_cache]] function will clear the cache.
We simply remove the existing cache file and then exit.
If we don't exit using [[sys.exit]], the main program will write the cache back 
again on its exit.
<<functions>>=
def clear_cache(ls, args):
  try:
    os.remove(dirs.user_cache_dir + "/LadokSession")
  except FileNotFoundError as err:
    pass

  sys.exit(0)
@


\section{Other subcommands}

To add a subcommand we must add a subparser to the [[subp]] parser object from 
above, we do this in [[<<add subparsers to subp>>]].
Every subcommand exists in a separate module and that module provides the 
function [[add_command_options]] that takes [[subp]] as an argument.

We add the [[data]] subcommand.
<<modules>>=
import ladok3.data
<<add subparsers to subp>>=
ladok3.data.add_command_options(subp)
@

We add the [[report]] command.
<<modules>>=
import ladok3.report
<<add subparsers to subp>>=
ladok3.report.add_command_options(subp)
@

We add the [[student]] command.
<<modules>>=
import ladok3.student
<<add subparsers to subp>>=
ladok3.student.add_command_options(subp)
@

