\chapter{Overview of helper functions and methods}

We will now document some possible API calls to LADOK.
We also document the tests of these functions to illustrate their use.


\section{Example outputs and test code for the API}

We will provide both example outputs and test code.
The test code is the test cases we want to be able to run with [[pytest]] 
later.
We will design the test functions in such a way that we can reuse them to show 
the example outputs from the API requests.

We will use the following to test the API methods.
<<test api.py>>=
import json
import ladok3.kth
import os

ladok = ladok3.kth.LadokSession(
        os.environ["KTH_LOGIN"], os.environ["KTH_PASSWD"],
        test_environment=True) # for experiments

student_uid = "de709f81-a867-11e7-8dbf-78e86dc2470c"
dasak_instance_id = "39c56d6a-73d8-11e8-b4e0-063f9afb40e3"
dasak_education_id = "39cf7fb4-73d8-11e8-afa7-8e408e694e54"
dasak_round_id = "79b4b213-73da-11e8-b4e0-063f9afb40e3"
LAB1_uid = "39ca27fe-73d8-11e8-afa7-8e408e694e54"
LAB1_instance_id = "39ca2861-73d8-11e8-b4e0-063f9afb40e3"
KTH_org_id = "2474f616-dc41-11e8-8cc1-eaeeb71b497f"

<<test functions>>
@ We will then add [[test_X()]] functions in the [[<<test functions>>]] code 
block that will perform the tests.

The example code will be typeset with syntax highlighting.
It will all have the following block of code included.
\begin{pyblock}[apitest][numbers=left,firstnumber=last]
import json
import ladok3.kth
import os

ladok = ladok3.kth.LadokSession(
        os.environ["KTH_LOGIN"], os.environ["KTH_PASSWD"],
        test_environment=True) # for experiments

student_uid = "de709f81-a867-11e7-8dbf-78e86dc2470c"
dasak_instance_id = "39c56d6a-73d8-11e8-b4e0-063f9afb40e3"
dasak_education_id = "39cf7fb4-73d8-11e8-afa7-8e408e694e54"
dasak_round_id = "79b4b213-73da-11e8-b4e0-063f9afb40e3"
LAB1_uid = "39ca27fe-73d8-11e8-afa7-8e408e694e54"
LAB1_instance_id = "39ca2861-73d8-11e8-b4e0-063f9afb40e3"
KTH_org_id = "2474f616-dc41-11e8-8cc1-eaeeb71b497f"
\end{pyblock}


\section{HTTP queries to LADOK}

To make things easier, we will add three methods: [[get_query]], [[put_query]] 
and [[post_query]], which are shortcuts to make GET, PUT and POST queries to 
LADOK.
<<LadokSession data methods>>=
def get_query(self, path, content_type="application/vnd.ladok-resultat+json"):
  """Returns GET query response for path on the LADOK server"""
  headers = self.headers.copy()
  headers["Content-Type"] = content_type

  return self.session.get(
    url=self.base_gui_proxy_url + path,
    headers=headers)

def put_query(self, path, put_data,
  content_type="application/vnd.ladok-resultat+json"):
  """Returns PUT query response for path on the LADOK server"""
  headers = self.headers.copy()
  headers["Content-Type"] = content_type
  headers["X-XSRF-TOKEN"] = self.get_xsrf_token()
  headers["Referer"] = self.base_gui_url

  return self.session.put(
    url=self.base_gui_proxy_url + path,
    json=put_data,
    headers=headers)

def post_query(self, path, post_data,
  content_type="application/vnd.ladok-resultat+json"):
  """Returns POST query response for path on the LADOK server"""
  headers = self.headers.copy()
  headers["Content-Type"] = content_type
  headers["X-XSRF-TOKEN"] = self.get_xsrf_token()
  headers["Referer"] = self.base_gui_url

  return self.session.post(
    url=self.base_gui_proxy_url + path,
    json=post_data,
    headers=headers)
@


\section{Cleaning data for printing}

We sometimes want to print the data, for instance, example output in this 
document.
For this reason we introduce some cleaning functions.
These recursively transcends the JSON structure removing the data that should 
be removed.
<<functions>>=
def clean_data(json_obj):
  remove_links(json_obj)
  pseudonymize(json_obj)
@

The [[remove_links]] functions removes the [[link]] key--value pairs.
The [[link]] values contains URLs for all requests that data are based on.
<<functions>>=
def remove_links(json_obj):
  """Recursively removes all "link" keys and values"""
  if isinstance(json_obj, dict):
    if "link" in json_obj:
      json_obj.pop("link")
    for key, value in json_obj.items():
      remove_links(value)
  elif isinstance(json_obj, list):
    for item in json_obj:
      remove_links(item)
@

The [[pseudonymize]] function replaces names and personnummer with dummy 
entries.
<<functions>>=
def pseudonymize(json_obj):
  """Recursively pseudonymizes a JSON data record"""
  if isinstance(json_obj, dict):
    if "Fornamn" in json_obj:
      json_obj["Fornamn"] = "Student"
    if "Efternamn" in json_obj:
      json_obj["Efternamn"] = "Studentsson"
    if "Personnummer" in json_obj:
      json_obj["Personnummer"] = "191234561234"
    for key, value in json_obj.items():
      pseudonymize(value)
  elif isinstance(json_obj, list):
    for item in json_obj:
      pseudonymize(item)
@


\chapter{Grade-related API calls}

\section{[[grade_scales_JSON]]}\label{GradeScalesJSON}

To request the grading scales from LADOK, we request all of them and return a 
list of JSON data objects containing the grading scale data.
<<LadokSession data methods>>=
def grade_scales_JSON(self):
  response = self.get_query('/resultat/grunddata/betygsskala')

  if response.status_code == 200:
    return response.json()["Betygsskala"]
  return None
@

We add the following test.
If we can convert the return value do JSON, it's probably correct.
(No this isn't the best of tests.)
<<test functions>>=
def test_grade_scales_JSON():
  assert ladok.grade_scales_JSON()[0]
@

This method is used as follows.
\begin{pyblock}[apitest][numbers=left,firstnumber=last]
print(json.dumps(
  ladok3.clean_data(ladok.grade_scales_JSON()[0]),
  indent=2, ensure_ascii=False))
\end{pyblock}
The output looks like this.
\stdoutpythontex[verbatim]


\chapter{Student-related API calls}

Here we have collected API-calls related to students.

\section{[[get_student_data_JSON]] and [[get_student_data_by_uid_JSON]]}

This method fetches the basic information about a student based on 
personnummer.
To pull the data based on personnummer we must actually form a search query.
(This code is a merge of a slight adaptation of the code by Baltatzis and that 
of Chip.)
<<LadokSession data methods>>=
#####################################################################
#
# get_student_data_JSON
#
# person_nr          - personnummer, flera format accepteras enligt regex:
#                      (\d\d)?(\d\d)(\d\d\d\d)[+\-]?(\w\w\w\w)
#
# lang               - language code 'en' or 'sv', defaults to 'sv'
#
# RETURNERAR en dictionary med för- och efternamn and more
def get_student_data_JSON(self, person_nr_raw, lang = 'sv'):
  person_nr =  format_personnummer(person_nr_raw)
  
  if not person_nr: raise Exception('Invalid person nr ' + person_nr_raw)

  response = self.session.get(
    url=self.base_gui_proxy_url +
      '/studentinformation/student/filtrera?limit=2&orderby=EFTERNAMN_ASC&orderby=FORNAMN_ASC&orderby=PERSONNUMMER_ASC&page=1&personnummer='
        + person_nr + '&skipCount=false&sprakkod='+lang,
    headers=self.headers)
  
  if response.status_code == requests.codes.ok:
    record = response.json()["Resultat"]
  else:
    raise ValueError(
      f"can't find student based on personnummer {person_nr_raw}")

  if len(record) != 1:
    raise ValueError(
      f"can't find student based on personnummer {person_nr_raw}")

  return record[0]
@

To test this function, we do the following.
<<test functions>>=
def test_get_student_data_JSON():
  assert ladok.get_student_data_JSON("8506097891")
@

We also have the corresponding for LADOK's UID, which fetches the record 
directly.
<<LadokSession data methods>>=
#####################################################################
#
# get_student_data_by_uid_JSON
#
# uid                - Ladok ID
#
# RETURNERAR en dictionary med för- och efternamn and more
def get_student_data_by_uid_JSON(self, uid):
  response = self.session.get(
    url = self.base_gui_proxy_url +
      '/studentinformation/student/'+uid, headers = self.headers)
  if response.status_code == requests.codes.ok:
    return response.json()
  raise AttributeError(f"can't fetch student attributes by LADOK ID {uid}")
@

To test this function, we do the following.
<<test functions>>=
def test_get_student_data_by_uid_JSON():
  assert ladok.get_student_data_by_uid_JSON(student_uid)
@

The result is the same for both method.
We show the output of the last one.
\begin{pyblock}[apitest][numbers=left,firstnumber=last]
result = ladok.get_student_data_by_uid_JSON(student_uid)
print(json.dumps(ladok3.clean_data(result), indent=2, ensure_ascii=False))
\end{pyblock}
The output looks like this.
\stdoutpythontex[verbatim]


\section{[[get_student_contact_data_JSON]]}

We want to get the contact info for a student from LADOK.
This data includes email, postal address and phone number.
It also includes when they were last updated.
<<LadokSession data methods>>=
def get_student_contact_data_JSON(self, student_id):
  """Returns contact data for student with student_id, returns JSON"""
  response = self.get_query(
    f"/studentinformation/internal/student/{student_id}/kontaktuppgifter",
    "application/vnd.ladok-studentinformation+json")

  if response.status_code == requests.codes.ok:
    return response.json()
  return None
@

We test this function.
<<test functions>>=
def test_get_student_contact_data_JSON():
  assert ladok.get_student_contact_data_JSON(student_uid)
@

To use the function, we do as follows.
\begin{pyblock}[apitest][numbers=left,firstnumber=last]
result = ladok.get_student_contact_data_JSON(student_uid)
print(json.dumps(ladok3.clean_data(result), indent=2, ensure_ascii=False))
\end{pyblock}
The output looks like this.
\stdoutpythontex[verbatim]


\section{[[get_student_suspensions_JSON]]}

We want to check if any student is suspended from studies.
We can get a list of all suspension periods from LADOK.
<<LadokSession data methods>>=
def get_student_suspensions_JSON(self, student_id):
  """
  Returns suspensions from studies for student with student_id,
  returns JSON
  """
  response = self.get_query(
    f"/studentinformation/internal/avstangning/student/{student_id}",
    "application/vnd.ladok-studentinformation+json")

  if response.status_code == requests.codes.ok:
    return response.json()
  return None
@

We test this function.
<<test functions>>=
def test_get_student_suspensions_JSON():
  assert ladok.get_student_suspensions_JSON(student_uid)
@

To use the function, we do as follows.
\begin{pyblock}[apitest][numbers=left,firstnumber=last]
result = ladok.get_student_suspensions_JSON(student_uid)
print(json.dumps(ladok3.clean_data(result), indent=2, ensure_ascii=False))
\end{pyblock}
The output looks like this.
\stdoutpythontex[verbatim]



\section{[[registrations_JSON]]}

This methods returns \emph{all} registrations for a student, \ie registrations 
on courses and programmes.
<<LadokSession data methods>>=
def registrations_JSON(self, student_id):
  """Return all registrations for student with ID student_id."""
  response = self.get_query(
    '/studiedeltagande/tillfallesdeltagande/kurstillfallesdeltagande/student/'+
      student_id,
    "application/vnd.ladok-studiedeltagande+json")

  if response.status_code == 200:
    return response.json()["Tillfallesdeltaganden"]
  return None
@

We provide the following test.
<<test functions>>=
def test_registrations_JSON():
  results = ladok.registrations_JSON(student_uid)
  assert json.dumps(results, indent=2, ensure_ascii=False)
@

This method is used as follows.
\begin{pyblock}[apitest][numbers=left,firstnumber=last]
results = ladok.registrations_JSON(student_uid)
print(json.dumps(ladok3.clean_data(results), indent=2, ensure_ascii=False))
\end{pyblock}
The output looks like this.
\stdoutpythontex[verbatim]



\section{[[registrations_on_course_JSON]]}

This method returns all registrations for a particular course for a particular 
student.
This way we can check if a student has been registered several times on a 
course.
<<LadokSession data methods>>=
def registrations_on_course_JSON(self,
    course_education_id, student_id):
  """Return a list of registrations on course with education_id for student 
  with student_id. JSON format."""
  response = self.get_query(
    "/studiedeltagande/tillfallesdeltagande"
      f"/utbildning/{course_education_id}/student/{student_id}",
    "application/vnd.ladok-studiedeltagande+json")
  
  if response.status_code == 200:
    return response.json()["Tillfallesdeltaganden"]
  return None
@

We add the following test.
<<test functions>>=
def test_registrations_on_course_JSON():
  results = ladok.registrations_on_course_JSON(dasak_education_id, student_uid)
  assert json.dumps(results, indent=2, ensure_ascii=False)
@

This method is used as follows.
\begin{pyblock}[apitest][numbers=left,firstnumber=last]
results = ladok.registrations_on_course_JSON(dasak_education_id, student_uid)
print(json.dumps(ladok3.clean_data(results), indent=2, ensure_ascii=False))
\end{pyblock}
The output looks like this.
\stdoutpythontex[verbatim]



\chapter{Course-related API calls}

\section{[[search_course_rounds_JSON]]}

We want to search for course rounds by one or more keys.
<<LadokSession data methods>>=
def search_course_rounds_JSON(self, /, **kwargs):
  """Query LADOK about course rounds, possible keys:
  code, round_code, name
  """
  url = self.base_gui_proxy_url + "/resultat/kurstillfalle/filtrera?"

  if "code" in kwargs:
    url += f"kurskod={kwargs['code']}&"
  if "name" in kwargs:
    url += f"benamning={kwargs['name']}&"
  if "round_code" in kwargs:
    url += f"tillfalleskod={kwargs['round_code']}&"

  url += "page=1&limit=400&skipCount=false&sprakkod=sv"

  response = self.session.get(
    url=url,
    headers=self.headers)

  if response.status_code == requests.codes.ok:
    return response.json()["Resultat"]
  raise Exception(f"search_course_rounds_JSON failed: {response.text}")
@

We add the following test.
<<test functions>>=
def test_search_course_rounds_JSON():
  results = ladok.search_course_rounds_JSON(code="DD1317")
  assert results
@

This method is used as follows.
\begin{pyblock}[apitest][numbers=left,firstnumber=last]
prgi = ladok.search_course_rounds_JSON(code="DD1317")[0]
ladok3.clean_data(prgi)
print(json.dumps(prgi, indent=2, ensure_ascii=False))
\end{pyblock}
The output looks like this.
\stdoutpythontex[verbatim]



\section{[[course_rounds_JSON]]}

This method fetches all course rounds that uses the given course instance.
<<LadokSession data methods>>=
def course_rounds_JSON(self, course_instance_id):
  """Requires course instance ID"""
  response = self.get_query(
    f"/resultat/kurstillfalle/kursinstans/{course_instance_id}")

  if response.status_code == 200:
    return response.json()["Utbildningstillfalle"]
  return None
@

We add the following test.
<<test functions>>=
def test_course_rounds_JSON():
  results = ladok.course_rounds_JSON(dasak_instance_id)
  assert json.dumps(results[:1]+results[-1:], indent=2, ensure_ascii=False)
@

This method is used as follows.
\begin{pyblock}[apitest][numbers=left,firstnumber=last]
dasak10 = ladok.search_course_rounds(code="DD2395", round_code="81099")[0]
results = ladok.course_rounds_JSON(dasak10.instance_id)

ladok3.clean_data(results)
print(json.dumps(results[:1]+results[-1:], indent=2, ensure_ascii=False))
\end{pyblock}
The output looks like this.
\stdoutpythontex[verbatim]


\section{[[course_instance_JSON]]}

This method fetches the data for a given course instance.
It requires the course instance ID.
(This is a slightly rewritten version of Maguire's original method.)
<<LadokSession data methods>>=
def course_instance_JSON(self, instance_id):
  """Returns course instance data for a course with instance ID instance_id"""
  response = self.get_query(
    f"/resultat/utbildningsinstans/kursinstans/{instance_id}")

  if response.status_code == 200:
    return response.json()
  return None
@

We add the following test.
<<test functions>>=
def test_course_instance_JSON():
  results = ladok.course_instance_JSON(dasak_instance_id)
  assert json.dumps(results, indent=2, ensure_ascii=False)
@

This method is used as follows.
\begin{pyblock}[apitest][numbers=left,firstnumber=last]
results = ladok.course_instance_JSON(dasak10.instance_id)

ladok3.clean_data(results)
print(json.dumps(results, indent=2, ensure_ascii=False))
\end{pyblock}
The output looks like this.
\stdoutpythontex[verbatim]


\section{Course components}

There are two ways to get the components for a course.

\subsection{[[course_round_components_JSON]]}

This method fetches the course components of a course round from LADOK.
It requires the course round ID.
This one includes data such as the number of registered students as well, 
unlike the method in the next section.
<<LadokSession data methods>>=
def course_round_components_JSON(self, round_id):
  response = self.put_query(
    "/resultat/kurstillfalle/moment",
    {"Identitet": [round_id]}
  )

  if response.status_code == 200:
    return response.json()["MomentPerKurstillfallen"]
  raise Exception(response.json()["Meddelande"])
@

We add the following test.
<<test functions>>=
def test_course_round_components_JSON():
  components = ladok.course_round_components_JSON(dasak_round_id)
  assert json.dumps(components, indent=2, ensure_ascii=False)
@

This method is used as follows.
\begin{pyblock}[apitest][numbers=left,firstnumber=last]
try:
  components = ladok.course_round_components_JSON(dasak10.round_id)
except Exception as err:
  print(f"error: {err}")
else:
  ladok3.clean_data(components)
  print(json.dumps(components, indent=2, ensure_ascii=False))
\end{pyblock}
The output looks like this.
\stdoutpythontex[verbatim]



\chapter{Results-related API calls}

In this chapter we look at how to fetch results from LADOK and report new 
results to LADOK.

\section{Reported results}

There are two ways to get results for a course.
One method gives more data than the other.

\subsection{[[search_reported_results_JSON]]}

This method searches for student results for a given component on a given 
course round.
<<LadokSession data methods>>=
def search_reported_results_JSON(self, course_round_id, component_instance_id):
  """Requires:
  course_round_id: round_id for a course,
  component_instance_id: instance_id for a component of the course.
  """
  put_data = {
    "Filtrering": ["OBEHANDLADE", "UTKAST", "ATTESTERADE"],
    "KurstillfallenUID": [course_round_id],
    "OrderBy": [
      "EFTERNAMN_ASC",
      "FORNAMN_ASC",
      "PERSONNUMMER_ASC"
    ],
    "Limit": 400,
    "Page": 1,
    "StudenterUID": []
  }

  response = self.put_query(
    '/resultat/studieresultat/rapportera/utbildningsinstans/' +
      component_instance_id + '/sok',
    put_data)

  if response.status_code == 200:
    return response.json()["Resultat"]
  return None
@

We write the following test.
<<test functions>>=
def test_search_reported_results_JSON():
  results = ladok.search_reported_results_JSON(dasak_round_id,
    LAB1_instance_id)
  assert json.dumps(results, indent=2, ensure_ascii=False)
@

This method is used as follows.
\begin{pyblock}[apitest][numbers=left,firstnumber=last]
LAB1 = dasak10.components(code="LAB1")[0]

results = ladok.search_reported_results_JSON(dasak10.round_id, LAB1.instance_id)

ladok3.clean_data(results)
results = list(filter(
  lambda x: x["Student"]["Uid"] == me.ladok_id,
  results))
print(json.dumps(results, indent=2, ensure_ascii=False))
\end{pyblock}
The output looks like this.
\stdoutpythontex[verbatim]

\subsection{[[search_course_results_JSON]]}

Another method, which gives slightly different results is the following.
<<LadokSession data methods>>=
def search_course_results_JSON(self, course_round_id, component_instance_id):
  put_data = {
    "KurstillfallenUID": [course_round_id],
    "Tillstand": ["REGISTRERAD", "AVKLARAD", "AVBROTT"],
    "OrderBy": ["EFTERNAMN_ASC", "FORNAMN_ASC"],
    "Limit": 400,
    "Page": 1,
  }

  response = self.put_query(
    "/resultat/resultatuppfoljning/resultatuppfoljning/sok",
    put_data)

  if response.status_code == 200:
    return response.json()["Resultat"]
  return None
@

We test this by the following.
<<test functions>>=
def test_search_course_results_JSON():
  results = ladok.search_course_results_JSON(dasak_round_id, LAB1_instance_id)
  assert json.dumps(results, indent=2, ensure_ascii=False)
@

This method is used as follows.
\begin{pyblock}[apitest][numbers=left,firstnumber=last]
dasak10 = ladok.search_course_rounds(code="DD2395", round_code="81099")[0]
LAB1 = dasak10.components(code="LAB1")[0]

results = ladok.search_course_results_JSON(dasak10.round_id, LAB1.instance_id)

ladok3.clean_data(results)
results = list(filter(
  lambda x: x["Student"]["Uid"] == me.ladok_id,
  results))
print(json.dumps(results, indent=2, ensure_ascii=False))
\end{pyblock}
The output looks like this.
\stdoutpythontex[verbatim]


\section{Results for a student: [[student_results_JSON]]}

This method pulls results for an individual student for a particular course.
LADOK changed this API request in 2022.
<<LadokSession data methods>>=
def student_results_JSON(self, student_id, course_education_id):
  """Returns the results for a student on a course"""
  response = self.get_query(
    "/resultat/internal/studentenskurser/kursinformation"
    f"/student/{student_id}/kursUID/{course_education_id}"
  )

  if response.status_code == requests.codes.ok:
    return response.json()
  raise Exception(response.json()["Meddelande"])
@
 
We test this in the following way.
<<test functions>>=
def test_student_results_JSON():
  results = ladok.student_results_JSON(student_uid, dasak_education_id)
  assert json.dumps(results, indent=2, ensure_ascii=False)
@

This method is used as follows.
\begin{pyblock}[apitest][numbers=left,firstnumber=last]
results = ladok.student_results_JSON(me.ladok_id, dasak10.round_id)

ladok3.clean_data(results)
print(json.dumps(results, indent=2, ensure_ascii=False))
\end{pyblock}
The output looks like this.
\stdoutpythontex[verbatim]


\section{Modifying results}

We have two alternatives: add a new result or update an existing result draft.

\subsection{[[create_result_JSON]]}

This method is used to create a new result.
This result will be a draft.
It must later be finalized and then attested.

Note that since this is a new result, we must provide the [[StudieresultatUID]] 
where we want to add the result.
When we've done this, we'll get a [[ResultatUID]] back in the response.
From then on, it's the [[ResultatUID]] that's interesting.
<<LadokSession data methods>>=
def create_result_JSON(self,
      grade_id, grade_scale_id, date,
      study_result_id, instance_id,
      notes=[]):
  """Creates a new result"""
  response = self.post_query(
    "/resultat/studieresultat/skapany",
    [{"Resultat": [{
      "Betygsgrad": grade_id,
      "BetygsskalaID": grade_scale_id,
      "Examinationsdatum": date,
      "Noteringar": notes,
      "StudieresultatUID": study_result_id,
      "UtbildningsinstansUID": instance_id
    }]}]
  )

  if response.status_code == requests.codes.ok:
    return response.json()["Studieresultat"]
  raise Exception(response.json()["Meddelande"])
@

LADOK changed this API request in 2022.

\subsection{[[update_result_JSON]]}

This method updates an existing result draft.
Note that we cannot use this method to update a finalized result.
Note also that we use the [[ResultatUID]] and not the [[StudieresultatUID]] as 
we did for [[create_result_JSON]].
<<LadokSession data methods>>=
def update_result_JSON(self,
      grade_id, grade_scale_id, date,
      result_id, last_modified, notes=[]):
  response = self.put_query(
    '/resultat/studieresultat/uppdatera',
    {
      'Resultat': [{
        'ResultatUID': result_id,
        'Betygsgrad': grade_id,
        'BetygsskalaID': grade_scale_id,
        'Noteringar': notes,
        'Examinationsdatum': date,
        'SenasteResultatandring': last_modified
      }]
    }
  )

  if response.status_code == 200:
    return response.json()["Resultat"]
  raise Exception(response.json()["Meddelande"])
@

\section{Finalizing a result}

Here we cover the API calls needed to finalize (klarmarkera) a result in LADOK.

\subsection{[[result_attestants_JSON]] and [[result_reporters_JSON]]}

To finalize a result, we must know two things: who is reporting and who can 
attest.
We start with who can attest.
<<LadokSession data methods>>=
def result_attestants_JSON(self, result_id):
  """Returns a list of result attestants"""
  response = self.put_query(
    "/resultat/internal/anvandare/resultatrattighet/attestanter/kurstillfallesrapportering",
    {"Identitet": [result_id]}
  )

  if response.status_code == 200:
    return response.json()["Anvandare"]
  raise Exception(response.json()["Meddelande"])
@ The [[result_id]] is the ID returned in the [[ResultatUID]] field in the 
response from the [[create_result_JSON]] method.

LADOK changed this API request in 2022: the [[internal]] is mandatory part of 
the path.

We can test this in the following way.
<<test functions>>=
def test_result_attestants_JSON():
  try:
    attestants = ladok.result_attestants_JSON(
      "319558de-55c6-11ed-b4c5-e36d0ff64f20")
    assert json.dumps(attestants, indent=2, ensure_ascii=False)
  except Exception as err:
    assert "Några av angivna resultatidentiter" in str(err)
@

This method is used as follows.
\begin{pyblock}[apitest][numbers=left,firstnumber=last]
attestants = ladok.result_attestants_JSON(
  "319558de-55c6-11ed-b4c5-e36d0ff64f20")

print(json.dumps(attestants[0], indent=2, ensure_ascii=False))
\end{pyblock}
The output looks like this.
\stdoutpythontex[verbatim]

Now, we get a list of who can report (basically anyone registered in the entire 
organization).
<<LadokSession data methods>>=
def result_reporters_JSON(self, organization_id):
  """Returns a list of who can report results in an organization"""
  response = self.get_query(
    "/kataloginformation/anvandare/organisation/" +
      organization_id + "/resultatrapportorer",
    "application/vnd.ladok-kataloginformation+json"
  )

  if response.status_code == 200:
    return response.json()["Anvandare"]
  raise Exception(response.text)
@

We can test this as follows.
<<test functions>>=
def test_result_reporters_JSON():
  reporters = ladok.result_reporters_JSON(KTH_org_id)
  assert json.dumps(reporters, indent=2, ensure_ascii=False)
@

This method is used as follows.
\begin{pyblock}[apitest][numbers=left,firstnumber=last]
reporters = ladok.result_reporters_JSON(components["OrganisationUID"])
ladok3.remove_links(reporters)

print(json.dumps(reporters[8], indent=2, ensure_ascii=False))
\end{pyblock}
The output looks like this.
\stdoutpythontex[verbatim]

\subsection{[[user_info_JSON]]}

Usually, we want to set the reporter to the logged-in user.
We can use the following API call to get information about the logged-in user.
<<LadokSession data methods>>=
def user_info_JSON(self):
  response = self.get_query(
    "/kataloginformation/anvandare/anvandarinformation",
    "application/vnd.ladok-kataloginformation+json"
  )

  if response.status_code == 200:
    return response.json()
  raise Exception(response.text)
@

We test this as follows.
<<test functions>>=
def test_user_info_JSON():
  me_teacher = ladok.user_info_JSON()
  assert json.dumps(me_teacher, indent=2, ensure_ascii=False)
@

This method is used as follows.
\begin{pyblock}[apitest][numbers=left,firstnumber=last]
me_teacher = ladok.user_info_JSON()
ladok3.remove_links(me_teacher)

print(json.dumps(me_teacher, indent=2, ensure_ascii=False))
\end{pyblock}
The output looks like this.
\stdoutpythontex[verbatim]

\subsection{[[finalize_result_JSON]]}

Finally, we can finalize the reported grade.
If [[attestant_id]] is not [[None]], then LADOK will send a notification to 
that person.
(LADOK changed this API request in 2022.)
<<LadokSession data methods>>=
def finalize_result_JSON(self,
    result_id, last_modified, reporter_id, attestant_id=None):
  """Marks a result as finalized (klarmarkera)"""
  response = self.put_query(
    f"/resultat/studieresultat/resultat/klarmarkerany",
    {
      "Klarmarkering": {
        "Beslutsfattare": [attestant_id] if attestant_id else [],
        "RattadAv": [reporter_id],
        "ResultatetsSenastSparad": last_modified
      },
      "ResultatUIDer": [result_id]
    }
  )

  if response.status_code == requests.codes.ok:
    return response.json()
  raise Exception(response.json()["Meddelande"])
@ This method returns a copy of the finalized result.


\section{[[participants_JSON]]}

The method returns JSON data containing a list of students (the participants in 
the course round).
(This is an extension of Maguire's original [[participants_JSON]] method.
The essential difference is keyword arguments to filter which students to 
include.)
<<LadokSession data methods>>=
def participants_JSON(self, course_round_id, /, **kwargs):
  """Returns JSON record containing participants in a course identified by 
  round ID.
  Filters in kwargs: not_started, ongoing, registered, finished, cancelled"""
  participants_types = []
  if "not_started" in kwargs and kwargs["not_started"]:
    participants_types.append("EJ_PABORJAD")
  if "ongoing" in kwargs and kwargs["ongoing"]:
    participants_types.append("PAGAENDE")
  if "registered" in kwargs and kwargs["registered"]:
    participants_types.append("REGISTRERAD")
  if "finished" in kwargs and kwargs["finished"]:
    participants_types.append("AVKLARAD")
  if "cancelled" in kwargs and kwargs["cancelled"]:
    participants_types.append("AVBROTT")
  # 'ATERBUD', # Withdrawal
  # 'PAGAENDE_MED_SPARR', # on-going block exists
  # 'EJ_PAGAENDE_TILLFALLESBYTE', # not on-going due to instance exchange
  # 'UPPEHALL', # not on-going due to approved leave from studies

  if not kwargs:
    participants_types = ["PAGAENDE", "REGISTRERAD", "AVKLARAD"]

  put_data = {
    'page': 1,
    'limit': 400,
    'orderby': ['EFTERNAMN_ASC',
                'FORNAMN_ASC',
                'PERSONNUMMER_ASC',
                'KONTROLLERAD_KURS_ASC'],
    'deltagaretillstand': participants_types,
    'utbildningstillfalleUID': [course_round_id]
  }

  response = self.put_query(
    '/studiedeltagande/deltagare/kurstillfalle',
    put_data,
    "application/vnd.ladok-studiedeltagande+json")
  if response.status_code == 200:
    return response.json()["Resultat"]
  return None
@

We test this as follows.
<<test functions>>=
def test_participants_JSON():
  results = ladok.participants_JSON(dasak_round_id)
  assert json.dumps(results, indent=2, ensure_ascii=False)
@

This method is used as follows.
\begin{pyblock}[apitest][numbers=left,firstnumber=last]
results = ladok.participants_JSON(dasak10.round_id)

ladok3.clean_data(results)
results = list(filter(
  lambda x: x["Student"]["Uid"] == me.ladok_id,
  results))
print(json.dumps(results, indent=2, ensure_ascii=False))
\end{pyblock}
The output looks like this.
\stdoutpythontex[verbatim]

